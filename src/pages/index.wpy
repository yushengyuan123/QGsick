<style lang="scss">
  .map_container {
    position: absolute;
    top: 0;
    bottom: 1px;
    left: 0;
    right: 0;
    z-index: 1;
  }

  .map {
    width: 100%;
    height: 100%;
  }

  .img_box {
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
  }

  .img_box image {
    width: 100%;
    height: 100%;
  }
</style>
<template>
  <view class="map_container">
    <!--    <intiAlert></intiAlert>-->
    <header :cityInfo.sync="citySelect"></header>
    <infectAlert :isVisible.sync="showInfectWarning"></infectAlert>
    <!--    <riskAlert :risk.sync="risk"></riskAlert>-->
    <!--    <bottomCard></bottomCard>-->
    <city :cityInfo.sync="citySelect"></city>
    <map
      id="myMap"
      style="width: 100%; height: 100%;"
      latitude="{{latitude}}"
      longitude="{{longitude}}"
      markers="{{markers}}"
      show-location="true"
      bindmarkertap="makertap"
      polygons="{{polygons}}">
    </map>
  </view>
</template>

<script>
  import wepy from 'wepy';
  import intiAlert from '../components/intiAlert';
  import header from '../components/header';
  import riskAlert from '../components/riskAlert';
  import infectAlert from '../components/infectAlert';
  import bottomCard from '../components/bottomCard';
  import city from '../components/city';
  import { Location } from '../tools/util/getLocation';
  import { GetSickData } from '../tools/api/getSickData';
  import { mapDraw } from '../tools/util/sickLabel';
  import { user } from '../tools/util/Login';
  import testMixin from '../mixins/test';

  export default class Index extends wepy.page {

    config = {
      navigationBarTitleText: 'QG疫情监控',
      'usingComponents': { 'ec-canvas': '../ec-canvas/ec-canvas' }
    };

    components = {
      intiAlert: intiAlert,
      header: header,
      riskAlert: riskAlert,
      infectAlert: infectAlert,
      bottomCard: bottomCard,
      city: city
    };

    mixins = [testMixin];

    events = {
      //city组件向父组件传来选择区域的信息,展示出疫情小区划分
      'getRegion': (data) => {
        console.log(data);
        this.citySelect.isShow = false;
        this.citySelect.province = data.province;
        this.citySelect.city = data.city;
        console.log(this.citySelect);
        GetSickData.getSickDate().then((res) => {
          console.log(res);
          mapDraw.drawRegion(res.data, data, this);
          mapDraw.setMarker(res.data, data, this);
        });
      },

      //打开城市选择器
      'showCity': (command) => {
        if (command === 'YES') {
          this.citySelect.isShow = true;
          return;
        }
        this.citySelect.isShow = false;
      }
    };


    data = {
      showInfectWarning: false,
      risk: {
        percent: 93,
        date: '2020/02/02/14:08',
        description: '感染风险极高，请自行在家隔离',
        isShow: false
      },
      citySelect: {
        isShow: false,
        province: null,
        city: null
      },
      latitude: null,
      longitude: null,
      markers: null,
      polygons: []
    };

    computed = {
      now() {
        return +new Date();
      }
    };

    onReady() {

    }

    onLoad() {
      // user.loginWx().then((res) => {
      //   console.log(res)
      //   console.log(user.getCode())
      // })
      Location.getLocation(this);
      GetSickData.getSickDate().then((res) => {
        mapDraw.sickInfo = res.data;
        return Location.getSite();
      }).then((result) => {
        this.citySelect.province = result.province;
        this.citySelect.city = result.city;
        // this.methods.initRegion(result, this)
        this.$apply();
      });
      // Location.getSite().then((res) => {
      //   this.citySelect.province = res.province
      //   this.citySelect.city = res.city
      //   this.$apply()
      // })
      // Location.circularGetLocation(this)
    }

    methods = {
      initRegion(res, that) {
        let data = {
          province: res.province,
          city: res.city
        }
        console.log(that)
        console.log(data)
        console.log('我执行了region');
        console.log(mapDraw.sickInfo);
        mapDraw.drawRegion(mapDraw.sickInfo, data, that);
        mapDraw.setMarker(mapDraw.sickInfo, data, that)
      }
    };
  }
  ;
</script>
